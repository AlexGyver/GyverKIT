/*
   Пример нескольких термометров на одном пине с использованием адресации
   Использование адресации для нескольких датчиков значительно экономит память
   ВНИМАНИЕ! Температура запрашивается для ОДНОГО датчика на одной линии (пине)
   Пока идет преобразование температуры линия "занята"
   Для паралельного считывания температуры используйте несколько линий
*/

#include <microDS18B20.h>
#define DS_PIN 2 // пин для термометров

// Уникальные адреса датчиков - считать можно в примере address_read
uint8_t s1_addr[] = {0x28, 0xE1, 0x57, 0xCF, 0x4E, 0x20, 0x1, 0x3D};
uint8_t s2_addr[] = {0x28, 0xFF, 0x36, 0x94, 0x65, 0x15, 0x2, 0x80};

MicroDS18B20<DS_PIN, s1_addr> sensor1;  // Создаем термометр с адресацией
MicroDS18B20<DS_PIN, s2_addr> sensor2;  // Создаем термометр с адресацией

void setup() {
  Serial.begin(9600);
  //sensor1.setResolution(12);  // разрешение [9-12] бит. По умолч. 12 
  //sensor2.setResolution(12);  // разрешение [9-12] бит. По умолч. 12 
}

void loop() {
  // датчик 1
  sensor1.requestTemp();      // Запрашиваем преобразование температуры
  delay(1000);                // Ожидаем окончания преобразования
  Serial.print("Sensor1 temp: ");
  Serial.print(sensor1.getTemp());  // Выводим температуру
  Serial.println(" *C");

  // датчик 2
  sensor2.requestTemp();
  delay(1000);
  Serial.print("Sensor2 temp: ");
  Serial.print(sensor2.getTemp());
  Serial.println(" *C");
}

/*
  Опрос датчиков асинхронный, т.е. не блокирует выполнение кода, но
  между requestTemp и getTemp должно пройти не менее
  
  точность | время
  12 бит   | 750 мс
  11 бит   | 375 мс
  10 бит   | 187 мс
  9 бит    | 93 мс
  
  Иначе датчик вернёт предыдущее значение
*/
